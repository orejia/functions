hash 算法描述：unsigned int hash(const std::string& key)
1. 类型说明
   u64: 64位无符号整形
   u32: 32位无符号整形
   i32: 32位有符号整形
   string : 二进制字符串
   
   *: 乘法符号，如果两个u64相乘，结果还是u64, 即2*3=6。
   ^: 异或符号，即1 ^ 0 =1, 1^1=0, 0^0=0.
   >>: 右位移符号，对于无符号整形，右移位后前端补0，即( 1010010001b >> 4 ) = 0000101001b
   ->: 赋值符号。
   本算法均使用u64作为计算因子
   
2. 常量说明
  seed : 0x1234ABCDL ：u64
  m : 0xc6a4a7935bd1e995 : u64

3. 算法流程：input->key:string, output->val:u32
						 局部变量: h:u64, k:u64, 
						 l_u64: u64, t: u64
3.1 initilize：
3.1.1 初始化: k->0, l_u64->0, t->0
3.1.2 计算key的长度: len_key->key的长度,然后初始化 h-> (m * len_key) ^ seed

3.2 循环计算
3.2.1 一次取8 byte 字符。
3.2.2 把8byte的字符视为 按照little endian（小端字节序，X86 cpu默认）排列的u64整数 l_u64。
3.2.3 k -> l_u64;
      k -> k * m;
      t -> ( k >> 47)
      k -> ( k ^ t )
      k -> k * m
      h -> h ^ k
      h -> h * m

3.3 如果key有剩余字符，则转3.3.1；否则转3.4。
3.3.1 取出key剩余字符，不足部分右补'\0', 凑齐8byte，以小字节序取值l_u64.
3.3.2 k -> l_u64
      h -> h ^ k
      h -> h * m

3.4 结束处理
3.4.1 t -> ( h >> 47 )
			h -> ( h ^ t )
			h -> h * m
			t -> ( h >> 47 )
			h -> ( h ^ t )
			
3.4.2 取h的低32位: h -> h & 0x00FFFFFFFF;
结束：h即为最终的hash值: val -> h;
 